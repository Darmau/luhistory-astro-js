---
import {sanityClient} from "sanity:client";
import ExhibitionSlider from "./Slider/ExhibitionSlider.tsx"
import {Image} from 'astro:assets';
const exhibitionData = await sanityClient.fetch(`
  *[_type == 'exhibition' && defined(dateRange) && defined(cover)]|order(dateRange.endDate desc){
    title,
    "slug": slug.current,
    "year": dateRange.endDate,
    "city": location.city,
    "cover": {
      "url": cover.asset->url,
      "caption": cover.caption
    }
  }`)
---
<div
  id = "exhibition-container"
  class = "col-start-2 col-span-10 mb-40"
>
  <hgroup
    class = "flex justify-between items-baseline text-neutral-900 mb-8"
  >
    <h2 class = "font-bold text-4xl md:text-5xl font-serif">Exhibitions</h2>
    <div class = "flex items-center gap-2">
      <a
        href = "/exhibition" class = "text-2xl font-thin font-serif"
        data-astro-prefetch = "viewport"
      >View more&nbsp;&nbsp;→</a>
    </div>
  </hgroup>
  <div class = "w-full">
    <div class = "overflow-visible">
      {exhibitionData && (
          <ExhibitionSlider client:only="react" exhibitions={exhibitionData} />
      )}
    </div>
  </div>
</div>

<style>
  .cover-img {
    width: 320px;
    height: 213px;
  }

  @media (min-width: 768px) {
    .cover-img {
      width: 528px;
      height: 352px;
    }
  }

  #exhibition-container {
    transition: opacity 0.5s ease-in-out;
  }

  .invisible {
    opacity: 0;
  }

  .visible {
    opacity: 1;
  }
</style>

<script>
  // 选择container，在进入viewport的时候添加class
  function showContainer() {
    const container = document.getElementById('exhibition-container');
    const options = {
      root: null,
      rootMargin: '0px',
      threshold: 0.1
    };

    const observer = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('visible');
          entry.target.classList.remove('invisible');
        } else {
          entry.target.classList.remove('visible');
          entry.target.classList.add('invisible');
        }
      });
    }, options);

    observer.observe(container);
  }

  document.addEventListener('DOMContentLoaded', showContainer);
  document.addEventListener('astro:after-swap', showContainer);
</script>
